/**
 */
package Manufacturing.provider;

import Manufacturing.util.ManufacturingAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ManufacturingItemProviderAdapterFactory extends ManufacturingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ManufacturingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.ManufacturingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingSystemItemProvider manufacturingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.ManufacturingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingSystemAdapter() {
		if (manufacturingSystemItemProvider == null) {
			manufacturingSystemItemProvider = new ManufacturingSystemItemProvider(this);
		}

		return manufacturingSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.WorkPiece} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceItemProvider workPieceItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.WorkPiece}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceAdapter() {
		if (workPieceItemProvider == null) {
			workPieceItemProvider = new WorkPieceItemProvider(this);
		}

		return workPieceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.UnaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryConditionItemProvider unaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.UnaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryConditionAdapter() {
		if (unaryConditionItemProvider == null) {
			unaryConditionItemProvider = new UnaryConditionItemProvider(this);
		}

		return unaryConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.WorkPieceTypeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceTypeConditionItemProvider workPieceTypeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.WorkPieceTypeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceTypeConditionAdapter() {
		if (workPieceTypeConditionItemProvider == null) {
			workPieceTypeConditionItemProvider = new WorkPieceTypeConditionItemProvider(this);
		}

		return workPieceTypeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.BinaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryConditionItemProvider binaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.BinaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryConditionAdapter() {
		if (binaryConditionItemProvider == null) {
			binaryConditionItemProvider = new BinaryConditionItemProvider(this);
		}

		return binaryConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.ProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessStepItemProvider processStepItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.ProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessStepAdapter() {
		if (processStepItemProvider == null) {
			processStepItemProvider = new ProcessStepItemProvider(this);
		}

		return processStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.TransportStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportStepItemProvider transportStepItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.TransportStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportStepAdapter() {
		if (transportStepItemProvider == null) {
			transportStepItemProvider = new TransportStepItemProvider(this);
		}

		return transportStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.QualityAssuranceStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualityAssuranceStepItemProvider qualityAssuranceStepItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.QualityAssuranceStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualityAssuranceStepAdapter() {
		if (qualityAssuranceStepItemProvider == null) {
			qualityAssuranceStepItemProvider = new QualityAssuranceStepItemProvider(this);
		}

		return qualityAssuranceStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.WorkPieceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPieceTypeItemProvider workPieceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.WorkPieceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPieceTypeAdapter() {
		if (workPieceTypeItemProvider == null) {
			workPieceTypeItemProvider = new WorkPieceTypeItemProvider(this);
		}

		return workPieceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Manufacturing.StorageFacility} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageFacilityItemProvider storageFacilityItemProvider;

	/**
	 * This creates an adapter for a {@link Manufacturing.StorageFacility}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageFacilityAdapter() {
		if (storageFacilityItemProvider == null) {
			storageFacilityItemProvider = new StorageFacilityItemProvider(this);
		}

		return storageFacilityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (manufacturingSystemItemProvider != null) manufacturingSystemItemProvider.dispose();
		if (workPieceItemProvider != null) workPieceItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (unaryConditionItemProvider != null) unaryConditionItemProvider.dispose();
		if (workPieceTypeConditionItemProvider != null) workPieceTypeConditionItemProvider.dispose();
		if (binaryConditionItemProvider != null) binaryConditionItemProvider.dispose();
		if (processStepItemProvider != null) processStepItemProvider.dispose();
		if (transportStepItemProvider != null) transportStepItemProvider.dispose();
		if (qualityAssuranceStepItemProvider != null) qualityAssuranceStepItemProvider.dispose();
		if (workPieceTypeItemProvider != null) workPieceTypeItemProvider.dispose();
		if (storageFacilityItemProvider != null) storageFacilityItemProvider.dispose();
	}

}
