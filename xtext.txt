// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyManufacturing with org.eclipse.xtext.common.Terminals

import "https://manufacturing.org/DSL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ManufacturingSystem returns ManufacturingSystem:
	'ManufacturingSystem'
	"{"
	name=EString
		'start' start=StorageFacility
		'end' end=StorageFacility
		('steps' '[' steps+=Step ( "," steps+=Step)* ']' )?
		('mitarbeiter' '[' mitarbeiter+=Person ( "," mitarbeiter+=Person)* ']' )?
	"}";


Step returns Step:
	ProcessStep | TransportStep | QualityAssuranceStep;


Conditon returns Conditon:
	UnaryCondition | WorkPieceTypeCondition | BinaryCondition;

EString returns ecore::EString:
	STRING | ID;

StorageFacility returns StorageFacility:
	{StorageFacility}
	'StorageFacility'
	name=EString
		('id' id=EInt)?
		('storage' '[' storage+=WorkPiece ( "," storage+=WorkPiece)* ']' )?
		('types' '[' types+=WorkPieceType ( "," types+=WorkPieceType)* ']' )?
	;

Person returns Person:
	{Person}
	'Person'
	name=EString;

EInt returns ecore::EInt:
	'-'? INT;

WorkPiece returns WorkPiece:
	'WorkPiece'
	name=EString
		'type' type=[WorkPieceType|EString]
	;

WorkPieceType returns WorkPieceType:
	{WorkPieceType}
	'WorkPieceType'
	name=EString;

ProcessStep returns ProcessStep:
	'ProcessStep'
		('duration' duration=EString)?
		('responsible' responsible=[Person|EString])?
		'inputWorkpiece' '[' inputWorkpiece+=[WorkPiece|EString] ( "," inputWorkpiece+=[WorkPiece|EString])* ']' 
		('subManufacturingsystem' subManufacturingsystem=ManufacturingSystem)?
		('inputConditon' inputConditon=Conditon)?
		'outputWorkpiece' '[' outputWorkpiece+=WorkPiece ( "," outputWorkpiece+=WorkPiece)* ']' 
	;

TransportStep returns TransportStep:
	'TransportStep'
		('duration' duration=EString)?
		('responsible' responsible=[Person|EString])?
		'inputWorkpiece' '[' inputWorkpiece+=[WorkPiece|EString] ( "," inputWorkpiece+=[WorkPiece|EString])* ']' 
	;

QualityAssuranceStep returns QualityAssuranceStep:
	'QualityAssuranceStep'
		('duration' duration=EString)?
		('responsible' responsible=[Person|EString])?
		'inputWorkpiece' '[' inputWorkpiece+=[WorkPiece|EString] ( "," inputWorkpiece+=[WorkPiece|EString])* ']' 
	;

UnaryCondition returns UnaryCondition:
	{UnaryCondition}
	operator=UnaryOperator
	conditon=Conditon
	;

WorkPieceTypeCondition returns WorkPieceTypeCondition:
	{WorkPieceTypeCondition}
	 type=[WorkPieceType|EString];

BinaryCondition returns BinaryCondition:
	"BinaryCondition"
	leftConditon=Conditon
	operator=BinaryOperator
	rightConditon=Conditon;

enum UnaryOperator returns UnaryOperator:
				NOT = '!';

enum BinaryOperator returns BinaryOperator:
				AND = '&&' | OR = '||';

